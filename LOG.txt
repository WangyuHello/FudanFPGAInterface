编译安装了wonton，找了个test例子，重新跑了一遍veriInstrument
--1.14
安装了wonton的新驱动zadig，可以在wonton上跑test了。
开始看VLFDDriver的源码
看完了，顺便大致看了下wonton的大框架结构，wonton是基于smims的usb驱动（未开源）而写的一个集成功能操作界面
smims需要好几个程序：veriInstrument, veriComm等，wonton给做到一起了
wonton的好处是比较简约，而且支持不同系统，但说实话有点简约过头了，缺少关键信息和提示
现在还不是很懂为什么要先用JS做一个自用服务器（网页）（可能是多系统支持？），但无伤大雅

封装结构一共三层
第一层，smims有一个链接库，用c++写的硬件驱动，可以读写，学长改过，在VLFDDriver文件夹里，协议是libusb
第二层，学长根据驱动写的c#封装函数
第三层，将c#函数再封装在Program里，成为按键的激活函数，在WontonCommon里
为了看学长c#的代码，安装一下c#环境
--1.15
构思了一下，用我会的c++写io的话，应该是调用第一层smims的驱动程序比较方便
第一步：先用一个test例子做到截取它的输出流
第二步：解读它的输出流
第三步：重新编成vcd格式，并且找一个waveviewer看一下波形正确
第四步：把功能集成为按钮做到wonton界面上
--1.16
无事发生
--1.17
新建了一个项目，想调用驱动的函数，但不太明白SharpVLFD和VLFDDriver两个驱动之间的关系
问了学长，知道了SharpVLFD是基于c#的VLFDDriver的封装，我的项目是c++，可以直接用VLFDDriver
然后学习了VS的项目结构，去找它生成的链接库
本来想直接仿照学长的封装，把原来只适用于Win32的驱动改到各个系统，但发现很困难，所以就直接用VLFDDriver的Win32链接库了
改系统的事之后做出来再说
--1.18
摸鱼
--1.19
学了调用动态链接库
本来函数名一直报错，后来用了一个解析dll的软件Dependency Walker，发现函数名很奇怪，改对就好了
可以用库里的函数连接fpga了，但是函数名称有点奇怪，fpga也报错而且没有详细错误信息

问了学长，知道了32位的dll有点奇怪，其他dll都是好的，就换了64位
但fpga还是报错，用SharpVLFD也会报错，信息更详细一点，叫"USB Driver can not open"，但实际上usb驱动已经更新了，wonton也能够运行
现在有三个程序：1、wonton 2、SharpVLFD的实例 3、自己写的
自己写的报错VLFD Program fail，SharpVLFD的报错USB Driver can not open，wonton可以正常运行

问了学长，是SharpVLFD里的readme给的教程的驱动版本太低，重装一个新版本就能用了
看来是我自己的程序写错了。。但还不知道错在哪

***修改了VLFDDriver里VLFD_ProgramFPGA里的报错信息。原来只有VLFD Program fail，但实际上源码里有更详细的报错信息，将它加在原句后面
一改完，它报错cannot open file的那个瞬间就知道自己傻了。。把SerialNo当成BitFilePath给输入Program里了。。
虽然错很sb，但顺手把原来VLFDDriver的驱动改了，也读得更通了
--1.20
开始做Write\Read
Write到512以上就失败了，Read一开始就失败了
CSharpTest的Close也失败了
以上三个都不知道为什么。。
--1.21
问了学长，拿到smims写的cpp测试文件，但是用于macos的，而且是静态链接库，所以复制了代码
虽然有一些启发，循环输入的参数其实是时钟周期clock cycle，建议用write_read_data而且最多支持4个uint16，还给了引脚注释
但还是报一样的错
解决了一些问题，但出现了更多问题。再加上多系统支持的坑，所以准备用SharpVLFD写了5555
--1.22
现在学下来c#和c++还是很像的。它所有的实现都是通过类的封装完成的。
有一个突出的细节是它的引用叫ref，调用的时候也要加上ref x, ref y而不像c++一样在声明时加&使用时不用加
c#的基本知识都学习了，大部分和c++还是很像的，只是强化了类的封装和调用。
那个自己建的caller类真的把我惊到了，原来caller之类的工具（句柄）也可以封装成class
--1.23
把runoob上的c#教程看完了，说实话不是很详细。还是要看看工程，具体问题具体查一下吧
--1.24
查了xamarin和unity，但是不是只有这两个平台，还有没有其他平台？不知道。这两个平台的方法也是experimental
查到了c语言中文网的教程，可以互补，写的还可以
--1.25
已经把c#大致学完了，还差一点文件和线程的知识有点难啃。
找到了smims的帮助文档和example，但没啥卵用。
根据它的example猜测，旧驱动libusb1.0应该是串行输入输出，一个clock cycle执行1024个数据传输
但新驱动，看到叫总线，怕不是并行的？现在还不清楚，得看到工程源码才知道了。
smims的帮助文档看起来还有点用处（英文），藏得太深了，藏在smims的安装目录里。。。
但是它的所有工具都只有dll，没有源码，看不了啊。。
***其实我是想把HDLAutoAssign功能也做进wonton里的，感觉会很有用。
--1.26
c语言中文网的教程除了winform gui之外也都看完了
也看完了SharpVLFD，有一些不是很理解的，但也不多了。
如果有时间会看一下smims的帮助文档
有一个一直想不通的问题：明明查到32位的库是有@4@8后缀的，但项目里明确删除了这个也是可以匹配到方法的？
还有一点没太看清：DllImportsFromStaticLib和DllImportsFromSharedLib是不是单独为了xamarin和unity而写的？
--1.27
问了下学长，主要起作用的是GetDelegateForFunctionPointer，其他dllimport都是辅助删掉也没事
mono\xamarin\unity都是c#平台，需要一些兼容代码
--1.28
看了wonton的代码，原来以为用的是avalonia做的界面
结果问了学长，发现是用js写的，要看懂感觉还要js基础。。
所以真正有用的代码都在Common\UI.Web\UI.Web.HostApp\Test几个项目里
突然想起Test里有一个使用FPGABoard的例子
拿出来和我的csharptest比较了一下，发现它用的是IOWriteReadData，程序用的也是IO系的，突然想起来学长这么讲过
而且test里的代码也是能够跑通的，那就没有问题，可以截取输出流了

这时候再回过头去看调用smims驱动的程序发现没用io系的open和close，换成io系之后就可以运行了。。
竟然这么坑，app系的就会报错,io系的就可以。。
所以写在SharpVLFD里的Readme里的代码是错的。。虽然不清楚app系在其他电脑上可不可以成功
后来发现app系和io系在代码上有一些不同，app用于VeriSDK，io用于VeriComm
然后现在得到它的输出流了之后对照引脚表就可以看出输出是什么了
它有一点画蛇添足的地方是明明引脚输出是按顺序来的，但它自定义的port是乱序的
其实根据它的xml文件和内部的PortMap文件对应起来可见其实是按照引脚的固定顺序分配port的，中间port分配根本没有必要
--1.29
差不多学会了vcd格式的基本语法
找到了vcdMaker可以把log转化为vcd
也找到了gtkwave的可执行文件，可以把vcd显示出来
顺便找了一些其他的软件，比如icarus verilog，是一种verilog编译语言，模拟结果
cygwin虽然可以在windows上运行linux，但真的很难用，还不如装一个双系统/虚拟机
gigawave viewer是synapticad做的付费软件，有破解版
老师给的vcd-parser文件有缺失，build不出来
gtkwave有64位版本但下载失败，就先用32位的了
下载了gtkwave源码但用cygwin编译失败，有一个包叫xz下载了但检测不出来，估计还是要原生linux上能行，所以就直接用可执行文件了
sifive也有一个verilator对标icarus但现在还用不上
--1.30
准备做一次从fpga一直到gtkwave的完整输出
做了完整输出，但是gtkwave不显示波形，看来需要研究一下vcdmaker和gtkwave的doc了
现在是用cmd调用的vcdmaker，整体有点简陋但能用了
--1.31
已经能够做到gtkwave的波形输出了
接下来就是完善代码，再看懂js部分，把它集成到wonton上了
这里感觉做一个cmd的class不好转移到其他系统上，还是把vcdmaker和gtkwave两个process分开来
单独做已经完成了，接下来是学习js了
--2.1
还是不太喜欢js的这种标签语言，很繁琐
发现了还有一个node.js教程，应该也要看一下
--2.2
学习js语言好慢啊
--2.3/4
摸鱼
--2.5/6
基本学完了js
--2.7
问了学长，查了一下，之后应该要学习React和Electron，好像是两个比较热门的跨平台开发语言
用这两个可以做到windows,linux,macos三平台支持，因为用的是chrome和标签语言
再想了一下vcdMaker好像只有windows和linux支持，要在macos上运行可能要安装g++？
gtkwave倒是有三平台支持的运行文件
还是比较麻烦的，先把windows的搞好吧
还想学学css
--2.8
学了css，真的很简单，也很麻烦，没有任何新意，只有规则和语法，没什么学习的必要，用上就会了
接下来就是React和Electron了
但估计过年会摸一会，看看CSAPP
--2.9/10
过年
--2.11/12
看了React，格式还是很固定的
套用固定格式就可以搭建自己想要的组件
问题还是在于看清楚嵌套关系和属性方法互相调用
--2.13
看完了runoob的react教程，感觉写的很潦草，没完全吃透
--2.14
找到了react官网的中文教程，写的好像不错，是用一个圈叉游戏工程实例讲解的
--2.15
这个圈叉游戏教程看完了，写的是真的好
又全面，覆盖了react的大部分基础知识点，又可拓展，还不超纲
代码也非常简洁，很多处理精妙的地方我个人肯定想不出来，也是培养了一波js代码能力
明天再看看有没有什么改进的地方
本来想说history在回溯的同时就重新渲染histoty选项，把回溯掉的选项都去掉，但好像有点困难
--2.16
基本搞完了圈叉游戏
但是回去看wonton感觉只是学了个皮毛啊。。
--2.17
摸鱼
但是发现nodejs是最近几年才兴起的新开发工具，针对服务器端有很大的应用前景
而且nodejs针对轻量化应用开发有得天独厚的优势，c相对还是太晦涩了
就是js系没有基础从零学起也太复杂了点。。
--2.18
Electron和JS一样细碎
好多功能可能用不上，附加值非常低，学了也用不上
不如从pj里找不懂的任务驱动
应该找机会问问学长，项目结构和细节都有些复杂，细碎，层级太多了
--2.19
问了学长，迎刃而解
原来要electron调试开启后，再在hostapp里npm run start就能实时调试了
main.js是main.ts(typescript)编译成的
--2.20
摸鱼
--2.21
看了一下fpgamanager.js感觉是个很重要的文件，但有些看不懂，看来没有目标光学没啥用，还是任务驱动比较好
const response = await fetch('/api/fpga/init');
这句话里的url地址没有找到？
--2.22
差不多看完了web.ui和web.ui.hostapp
感觉还是很混乱。。。
web.ui包括c#和React，内部组件和端口连接
web.ui.hostapp是用aspnet写的，之间的联系还不清楚
总之，只要修改web.ui就行了
--2.23/24
基本看完了js部分，留了一个fpgaManager，基本把项目结构搞清楚了，赶紧的要把功能集成上去了，摸了太多鱼了。
按键已经有了，但怎么响应还有点麻烦，应该是要通过ipc的
--2.25/26/27
有一个问题是FPGAManager.js上输出组件和输入组件的定义好像反了。。

为什么register\unregister有两个？重复？一个是输出组件一个是任意组件
初始化检查时两个register都运行了
删除输出组件时两个unregister都运行了
删除输入组件时运行了一个unscribe和一个任意组件的unregister
添加输出组件时只运行了任意组件的register
添加输入组件时只运行了任意组件的register

FPGAManager还没看完
fetch和APIController（结合FPGAController.cs）待看
--2.28
准备写的时候还是遇上很多问题，感觉还是先整理一下思路比较好：
Wonton.Common是用来调用dll的，具有原dll的所有可用函数，最好不要去动他，调用就行了
Wonton.CrossUI是没有用的，原来是Avalonia

Wonton.CrossUI.Web是csharp网络连接和React组件部分，深入去看：
里面的ClientApp是最大的先不管
Controllers里面有两个csharp文件，WindowController.cs是没用的
FPGAController.cs是返回FPGAResponse用的，可以和js端的fetch api结合起来调用
返回的FPGAResponse有各类信息在js端用.json方法获取
Extensions里面有一个未完成的可以和BridgeSettings结合起来ip访问的端口架设，以后可以用来做互联网连接
logs里面都是log信息，但具体是哪些文件产生的还不知道，没看到什么有用的信息，中文编码也有乱码
Models里面是FPGAResponse和ProjectInfo的声明，比较简单
Pages的用处不大，感觉像自动生成的？
Services里面的BridgeSettings和Extensions结合用的，现在用处不大
DarkMode则限定了Windows系统下运行，不知道和js端使用css调成黑暗模式的功能是不是重复？
ElectronIPC没用到，估计本来想用csharp做IPC的结果不好用，里面用到是IPCMain.on但现在实际用的是WebContent.Send
在最外层的Program和Startup应该是主程序，在里面找到了log的logger，但记录的都是网络信息现在还用不上
最后讲ClientApp
public存放了html,ico等网页、图形文件（杂项）
src的components是大头，Devices包括了元件的图形和核心机制
MainPanel看的不多，有时间再看看，里面应该是元件库的那个menu
Resource也是图片
Service比较重要，Darkmode依靠css变化调成黑暗模式
FPGAManager是js端和csharp的fpga函数做连接的，定义了很多可以debug输出的数据容器，在起名和含义上有点混淆可以改一改，基本上就是输入输出数据、元件名、端口名的映射
FPGAPortsMap是试出来的(?)fpga内部端口对应表，实际上这个内部对应非常多此一举，但是是烧在板子里的改不了
ProjectManager是将fpga直接得到的数据与wonton元件互动显示的桥梁
在外面的Title.js是最主要的React渲染界面，调用了Layout\Start，NavMenu好像没用上？
App和index则是更外部的调用，没啥好说的

Wonton.CrossUI.Web.HostApp用到了Electron，主要是Electron的方法，所以放在了一起，基本上都是对wonton界面的操作
main.js是main.ts的转译，看起来main.ts是源文件
Wonton.Test是一个Test但是是对Wonton.Common的测试，Electron和React都没有Test(但可以debug)
Wonton.Waveform是我写的，一个测试vcdmaker和gtkwave能不能用的程序
剩下两个都没用上

现在做这个logger需要每一时刻返回的ReadBuffer数据和引脚名称
--3.1\2\3
发现一个bug：项目未保存会跳出消息框提示，但如果wonton没有获取焦点就会报错kill error
但好像是debug时有release就没有了

现在主要在FPGAController.cs FPGAManager.js ProjectManager.js三者之间盘来盘去
首先FPGAController是连接FPGAManager这一dll动态链接库的，它响应两个js的请求返回fpga的数据
ProjectManager.js主要负责初始化pj
FPGAManager.js主要负责处理数据并显示结果、更新组件
因此初始化是PM干，改数据是FM干
这里有一点很坑，标注了：
FPGAController.cs有一个readxmltojson是用不上的，估计是写了效果不好弃用了，一开始没看出来浪费了不少时间
readxmltojson对应PM里的ReadProjectIO也没用上（还煞有其事。。。）
接下来需要一个引脚名称与实际引脚序号的映射，应该会在FPGAManager里加上，一起存起来
--3.7
还有一个问题是现在只能在创建项目时指定xml，不能在项目中更换xml path？
--3.8
开学之后好多事情，这个就摸了，但下周二就要去pre就很慌，现在还没做完，只能爆肝了
这几天把PortsMap成功倒入进来，也已经做了xml引脚和实际引脚序号的map
接下来就要解读WriteReadLog把他变成vcd可以做的就行了
--3.17
把基本功能都做出来了，意外地没有碰到什么大问题
剩下要做的：
1. log文件的存储方式要改成能用安装包安装的形式--大部分可以用FPGAManager.GetConfigDir解决，但不知道怎么access FPGAPortsMap
2. 测试linux和macos(大问题)，可能弃用vcdmaker
3. 增加器件
--3.18
